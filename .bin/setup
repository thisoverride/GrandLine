#!/bin/bash

# Couleurs pour les messages
BLUE='\033[0;34m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Fonction pour demander et valider le nom du projet
ask_for_project_name() {
    while true; do
        read -p "Entrez le nom du projet: " project_name
        
        if [ -z "$project_name" ]; then
            echo "Le nom du projet ne peut pas √™tre vide. Veuillez sp√©cifier un nom."
        else
            # Valider le nom du projet en supprimant les caract√®res sp√©ciaux et les espaces
            project_name=$(echo "$project_name" | tr -cd '[:alnum:]._-' | sed 's/^[-]*//;s/[-]*$//')

            if [ -z "$project_name" ]; then
                echo "Nom de projet invalide. Veuillez sp√©cifier un nom valide."
            else
                # Ajouter le pr√©fixe "svc." au nom du projet
                project_name="svc.$project_name"
                break
            fi
        fi
    done
}

# Fonction pour cr√©er un r√©pertoire s'il n'existe pas d√©j√†
create_directory() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

# Fonction pour afficher un message en jaune
print_warning() {
    echo -e "${YELLOW}$1${NC}"
}

# Demander et valider le nom du projet
ask_for_project_name

# Cr√©er un r√©pertoire avec le nom du projet
create_directory "$project_name"

# Naviguer dans le r√©pertoire du projet
cd "$project_name" || exit

# Cr√©er les r√©pertoires src, build, et test s'ils n'existent pas d√©j√†
create_directory src
create_directory build
create_directory src/tests/unit/
create_directory src/controller/
create_directory src/framework/express

# Cr√©er les fichiers directement sans touch


echo "import express, { Application ,Request, Response,NextFunction } from "express";
import morgan from "morgan";
import helmet from "helmet";
import PathValidator from "../validator/PathValidator";
import AuthenticationController from "../../adapter/controller/AuthenticationController";


export default class ExpressApp {
  public app: Application;
  public controller: Array<any>;
  public PathValidator: PathValidator;

  /**
   * Creates an instance of ExpressApp.
   * Initializes middleware and sets up error handling.
   * @memberof ExpressApp
   */
  public constructor() {
    this.app = express();
    this.app.use(helmet());
    this.app.use(express.json());
    this.app.use(morgan('dev'));
    this.PathValidator = new PathValidator();
    this.controller = [new AuthenticationController()];
    this.injectControllers();
    this.setupErrorHandling();
  }

  /**
   *
   * Injects controller routes into the Express.
   * @private
   * @memberof ExpressApp
   */
  private injectControllers(): void {
    this.controller.forEach((controllerObject) => {
      controllerObject.ROUTE.forEach((controllerProperties: string) => {
        const [method, path, controller] = this.PathValidator.checkPath(controllerProperties);        
         (this.app as unknown as { [key: string]: Function })[method](path, controllerObject[controller]);
      });
    });
  }

  /**
   *
   * Sets up error handling middleware.
   * @private
   * @memberof ExpressApp
   */
  private setupErrorHandling() {
    this.app.use((err: Error, request: Request, response: Response, next: NextFunction) => {
      console.error(err); 
      response.status(500).json({ error: 'An unexpected error occurred.'});
    });
  }

  /**
   *
   * Starts the Express application on the specified port.
   * @param {number} port
   * @memberof ExpressApp
   */
  public async startEngine(port: number) {
      this.app.listen(port, () => {
      console.info(\`Service running on http://localhost:\${port}\`);
    });
  }
}
}" > src/framework/express/ExpressApp.ts

create_directory src/framework/validator

echo "export default class PathValidator {
  
  public checkPath(route: string): Array<string> {
    const validHttpMethods: string[] = ["GET","POST","PUT","PATCH","DELETE","HEAD","OPTIONS"];
    const regex: RegExp = /@([A-Z]+)\(([^)]+)\)/;
    const matches: RegExpExecArray | null = regex.exec(route);

    if (!matches) {
      throw new Error("Error route injection " + route + " is not a correct route injection.");
    }

    let httpMethod: string = matches[1];

    if (!validHttpMethods.includes(httpMethod)) {
      throw new Error("Error route injection " + route + " has an invalid HTTP method " + httpMethod + ".");
    }
    httpMethod = httpMethod.toLowerCase();

    const endpoints: string[] = matches[2].split(",");
    const path: string = endpoints[0] || "";
    const controller: string = endpoints[1] || "";

    return [httpMethod, path, controller];
  }
}" > src/framework/validator/PathValidator.ts

echo "export interface ControllerImpl {
  ROUTE: string[];
}" > src/controller/ControllerInterface.ts

# Cr√©er un fichier ControllerDefault.ts s'il n'existe pas d√©j√†
if [ ! -f "src/controller/ControllerDefault.ts" ]; then
  echo "import { Request, Response } from 'express'; 
import { ControllerImpl } from './ControllerInterface';

export default class ContainerController implements ControllerImpl {
  public readonly ROUTE: Array<string>;

  public constructor() {
    this.ROUTE = [
      '@GET(/index.default)'
    ];
  }

  public async default(request: Request, response: Response): Promise<void> {
    response.status(200).json({ status: 'Running' });
  }
}" > src/controller/ControllerDefault.ts
fi

# Cr√©er un fichier index.test.ts s'il n'existe pas d√©j√†
if [ ! -f "src/tests/unit/index.test.ts" ]; then
  touch src/tests/unit/index.test.ts
fi

# Cr√©er un fichier Dockerfile s'il n'existe pas d√©j√†
if [ ! -f "Dockerfile" ]; then
  touch Dockerfile
fi

if [ ! -f "jest.config.js" ]; then
  touch jest.config.js
  echo "module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'node',
    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
    testRegex: '(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$',
    roots: ['<rootDir>/src/tests/unit'],
  };" > jest.config.js
fi

cat <<EOL > package.json
{
  "name": "$project_name",
  "version": "1.0.0",
  "main": "main.js",
  "license": "MIT",
  "scripts": {
    "dev": "ts-node-dev src/main.ts",
    "prod": "node build/main.js",
    "build": "tsc",
    "test": "jest"
  }
}

EOL
# Initialisez le projet avec yarn (acceptez les valeurs par d√©faut)
# yarn init -y

# Installez TypeScript, Express, Morgan, Jest et leurs types respectifs
yarn add --dev typescript jest @types/node @types/express @types/morgan @types/jest 
yarn add express morgan

# Installez ts-node dans les devDependencies
yarn add --dev ts-node-dev


# Installez TypeScript, Express, Morgan, Jest et leurs types respectifs
yarn install

# Ex√©cutez la commande tsc --init pour cr√©er un fichier tsconfig.json
npx tsc --init

# Cr√©ez un fichier "main.ts" dans le dossier "src" s'il n'existe pas d√©j√†
if [ ! -f "src/main.ts" ]; then
  echo "
  import ExpressApp from './framework/express/ExpressApp';

  const port: number = 8001;
  const expressApp = new ExpressApp();
  expressApp.startEngine(port);
  " > src/main.ts
fi

echo "${BLUE} Pour lancer le projet en mode d√©veloppement üõ†Ô∏è , utilisez la commande :${NC}"
echo "${GREEN} yarn dev${NC}"
echo "${BLUE} Pour lancer le projet en mode production üöÄ, utilisez la commande :${NC}"
echo "${GREEN} yarn prod${NC}"
echo "${BLUE} Pour lancer les tests unitaires üß™ sur le projet, utilisez la commande :${NC}"
echo "${GREEN} yarn test ${NC}"
echo "${BLUE} Pour compiler le projet ‚öôÔ∏è utilisez la commande :${NC}"
echo "${GREEN} yarn build ${NC}"
echo "${BLUE} Pour vous positionner dans le projet üìÇ utilisez la commande :${NC}"
echo "${GREEN} cd $project_name ${NC}"

# echo "Script termin√©. Le projet $project_name est initialis√©, les d√©pendances sont install√©es, et la structure de dossiers pour les tests unitaires est pr√™te."

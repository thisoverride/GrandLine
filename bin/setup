#!/bin/bash

# Couleurs pour les messages
BLUE='\033[0;34m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Fonction pour demander et valider le nom du projet
ask_for_project_name() {
    while true; do
        read -p "Entrez le nom du projet: " project_name
        
        if [ -z "$project_name" ]; then
            echo "Le nom du projet ne peut pas √™tre vide. Veuillez sp√©cifier un nom."
        else
            # Valider le nom du projet en supprimant les caract√®res sp√©ciaux et les espaces
            project_name=$(echo "$project_name" | tr -cd '[:alnum:]._-' | sed 's/^[-]*//;s/[-]*$//')

            if [ -z "$project_name" ]; then
                echo "Nom de projet invalide. Veuillez sp√©cifier un nom valide."
            else
                # Ajouter le pr√©fixe "svc." au nom du projet
                project_name="svc.$project_name"
                break
            fi
        fi
    done
}

# Fonction pour cr√©er un r√©pertoire s'il n'existe pas d√©j√†
create_directory() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}
# Fonction pour afficher un message en jaune
print_warning() {
    echo -e "${YELLOW}$1${NC}"
}
# Demander et valider le nom du projet
ask_for_project_name

# Cr√©er un r√©pertoire avec le nom du projet
create_directory "$project_name"

# Naviguer dans le r√©pertoire du projet
cd "$project_name" || exit

# Cr√©er les r√©pertoires src, build, et test s'ils n'existent pas d√©j√†
create_directory src
create_directory build
create_directory src/tests/unit/
touch src/tests/unit/index.test.ts

# Cr√©er un fichier Dockerfile s'il n'existe pas d√©j√†
touch Dockerfile

cat <<EOL > package.json
{
  "name": "$project_name",
  "version": "1.0.0",
  "main": "main.js",
  "license": "MIT",
  "scripts": {
    "dev": "ts-node-dev src/main.ts",
    "prod": "node build/main.js",
    "build": "tsc"
  }
}

EOL
# Initialisez le projet avec yarn (acceptez les valeurs par d√©faut)
# yarn init -y

# Installez TypeScript, Express, Morgan, Jest et leurs types respectifs
yarn add --dev typescript @types/node @types/express @types/morgan jest
yarn add express morgan

# Installez ts-node dans les devDependencies
yarn add --dev ts-node-dev

# Ex√©cutez la commande tsc --init pour cr√©er un fichier tsconfig.json
npx tsc --init

# Cr√©ez un fichier "main.ts" dans le dossier "src" s'il n'existe pas d√©j√†
echo "console.log('"$project_name" generated !');" > src/main.ts

echo "${BLUE} Pour lancer le projet en mode d√©veloppement üõ†Ô∏è , utilisez la commande :${NC}"
echo "${GREEN} yarn dev${NC}"
echo "${BLUE} Pour lancer le projet en mode production üöÄ, utilisez la commande :${NC}"
echo "${GREEN} yarn prod${NC}"
echo "${BLUE} Pour lancer les tests unitaires üß™ sur le projet, utilisez la commande :${NC}"
echo "${GREEN} yarn test ${NC}"
echo "${BLUE} Pour vous complier le projet ‚öôÔ∏è utilisez la commande :${NC}"
echo "${GREEN} yarn build ${NC}"
echo "${BLUE} Pour vous positionner dans le projet üìÇ utilisez la commande :${NC}"
echo "${GREEN} cd $project_name ${NC}"

# echo "Script termin√©. Le projet $project_name est initialis√©, les d√©pendances sont install√©es, et la structure de dossiers pour les tests unitaires est pr√™te."
